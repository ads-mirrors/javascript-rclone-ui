name: WinGet2

on:
    workflow_dispatch:

jobs:
    validate-and-test:
        runs-on: windows-2025

        env:
            MANIFEST_DIR: winget
            PACKAGE_ID: RcloneUI.RcloneUI
            EXPECTED_NAME: Rclone UI
            EXPECTED_PUBLISHER: Rclone UI
            EXPECTED_VERSION: 2.6.0

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Show winget version
              shell: pwsh
              run: winget --version

            - name: Validate manifest (schema/rules)
              shell: pwsh
              run: |
                  $ErrorActionPreference = 'Stop'
                  if (-not (Test-Path $env:MANIFEST_DIR)) { throw "Missing $env:MANIFEST_DIR" }

                  winget validate --manifest $env:MANIFEST_DIR --disable-interactivity --verbose-logs `
                    | Tee-Object -FilePath "$pwd\winget-validate.txt"

            - name: Enable local manifest installs
              shell: pwsh
              run: |
                  # Required to install directly from a local manifest folder. :contentReference[oaicite:2]{index=2}
                  winget settings --enable LocalManifestFiles

            - name: Install PowerShell YAML module (for parsing the manifest)
              shell: pwsh
              run: |
                  Install-Module -Name powershell-yaml -Force -Scope CurrentUser

            - name: Check installer URLs + verify SHA256 for all installers (x64 & arm64)
              shell: pwsh
              run: |
                  Import-Module powershell-yaml
                  $manifestFiles = Get-ChildItem -Path $env:MANIFEST_DIR -Include *.yml,*.yaml -File -Recurse
                  if (-not $manifestFiles) { throw "No manifest files found in $env:MANIFEST_DIR" }

                  $rows = @()
                  foreach ($f in $manifestFiles) {
                    $y = (Get-Content -Raw $f.FullName) | ConvertFrom-Yaml
                    if ($y.ManifestType -ne 'installer') { continue }

                    foreach ($inst in $y.Installers) {
                      $url = $inst.InstallerUrl
                      $sha = ($inst.InstallerSha256 ?? $inst.InstallerSha256Hash ?? $inst.Sha256)  # tolerate naming
                      $arch = $inst.Architecture
                      $scope = $inst.Scope

                      $out = Join-Path $env:RUNNER_TEMP ("installer_{0}_{1}{2}" -f $arch, $scope, [IO.Path]::GetExtension($url))
                      Write-Host "Downloading $url -> $out"
                      Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing

                      $got = (Get-FileHash -Path $out -Algorithm SHA256).Hash.ToLower()
                      $ok = $got -eq $sha.ToLower()
                      $rows += [pscustomobject]@{
                        File = $out; Architecture=$arch; Scope=$scope; Url=$url; ExpectedSHA=$sha; ActualSHA=$got; Match=$ok
                      }
                      if (-not $ok) { throw "SHA256 mismatch for $url" }
                    }
                  }
                  $rows | Format-Table | Out-String | Tee-Object "$pwd\hash-check.txt"

            - name: Matrix install tests (x64 / user & machine)
              shell: pwsh
              run: |
                  $ErrorActionPreference = 'Stop'
                  $scopes = @('user','machine')

                  # Prime sources once to avoid first-run prompts
                  winget source list --accept-source-agreements | Out-Null
                  winget source update --accept-source-agreements | Out-Null

                  foreach ($scope in $scopes) {
                  Write-Host "=== INSTALL TEST scope=$scope (x64) ==="

                  # Before: plain 'list' caused the msstore prompt
                  winget list --id $env:PACKAGE_ID -e --source winget --accept-source-agreements `
                      | Tee-Object -FilePath "$pwd\winget-list-before-$scope.txt"

                  # Best-effort uninstall in case a prior run left state around
                  winget uninstall --id $env:PACKAGE_ID -e --scope $scope --silent `
                      --source winget --accept-source-agreements --disable-interactivity --verbose-logs 2>$null

                  # Install from the local manifest, but constrain dependency resolution to 'winget'
                  winget install --manifest $env:MANIFEST_DIR --scope $scope --architecture x64 --silent `
                      --source winget --accept-source-agreements --accept-package-agreements `
                      --disable-interactivity --verbose-logs `
                      | Tee-Object -FilePath "$pwd\winget-install-$scope.txt"

                  # Post-install presence check (also pinned to 'winget' to avoid msstore)
                  winget list --id $env:PACKAGE_ID -e --source winget --accept-source-agreements `
                      | Tee-Object -FilePath "$pwd\winget-list-after-$scope.txt"

                  # Verify ARP entry in the appropriate registry hive (unchanged)
                  if ($scope -eq 'machine') {
                      $roots = @(
                      'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall',
                      'HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall'
                      )
                  } else {
                      $roots = @('HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall')
                  }
                  $found = $false
                  foreach ($root in $roots) {
                      if (Test-Path $root) {
                      Get-ChildItem $root | ForEach-Object {
                          $p = Get-ItemProperty $_.PsPath -ErrorAction SilentlyContinue
                          if ($p.DisplayName -eq $env:EXPECTED_NAME) {
                          $found = $true
                          "ARP ($scope): Name=$($p.DisplayName) Publisher=$($p.Publisher) Version=$($p.DisplayVersion)" `
                              | Tee-Object -FilePath "$pwd\arp-$scope.txt"
                          if ($p.Publisher -ne $env:EXPECTED_PUBLISHER -or $p.DisplayVersion -ne $env:EXPECTED_VERSION) {
                              throw "ARP mismatch for $scope."
                          }
                          }
                      }
                      }
                  }
                  if (-not $found) { throw "ARP entry '$env:EXPECTED_NAME' not found for $scope scope." }

                  # Dependency presence check (pin to 'winget' to avoid msstore)
                  winget list --id Microsoft.EdgeWebView2Runtime -e --source winget --accept-source-agreements `
                      | Tee-Object -FilePath "$pwd\webview2-$scope.txt"

                  # Clean uninstall (also pinned)
                  winget uninstall --id $env:PACKAGE_ID -e --scope $scope --silent `
                      --source winget --accept-source-agreements --disable-interactivity --verbose-logs `
                      | Tee-Object -FilePath "$pwd\winget-uninstall-$scope.txt"

                  winget list --id $env:PACKAGE_ID -e --source winget --accept-source-agreements `
                      | Tee-Object -FilePath "$pwd\winget-list-final-$scope.txt"
                  }

            #   - name: Collect WinGet logs + step outputs
            #     if: always()
            #     uses: actions/upload-artifact@v4
            #     with:
            #       name: winget-ci-logs
            #       path: |
            #         *.txt
            #         ${{ env.LOCALAPPDATA }}\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\DiagOutputDir\*.log
            #       if-no-files-found: ignore

            - name: CI summary
              if: always()
              shell: pwsh
              run: |
                  "## WinGet CI Summary`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append
                  Get-Content "$pwd\winget-validate.txt" -ErrorAction SilentlyContinue | Out-File $env:GITHUB_STEP_SUMMARY -Append
                  "`n---`nHashes:`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append
                  Get-Content "$pwd\hash-check.txt" -ErrorAction SilentlyContinue | Out-File $env:GITHUB_STEP_SUMMARY -Append
